os: linux
dist: bionic
language: minimal

# Don't build tags
if: tag IS blank

stages:
  - name: build_commit
    if: NOT (branch =~ /^rel\//) AND type != pull_request
  - name: build_pr
    if: type = pull_request
  - name: build_release
    if: branch =~ /^rel\// AND type != pull_request
  - name: deploy
    if: branch =~ /^rel\// AND type != pull_request
  - name: post_deploy
    if: branch =~ /^rel\// AND type != pull_request

jobs:
  allow_failures:
    - name: External ARM64 Deploy
    - name: External ARM64 Integration Test
    - name: External ARM Build
    - name: External ARM Deploy
    - name: Test Release Builds
  include:
    - stage: build_commit
      os: linux
      script:
        - scripts/travis/build_test.sh

    - stage: build_pr
      os: linux
      name: Ubuntu AMD64 CodeGen Verification
      script:
        - scripts/travis/codegen_verification.sh
    - # same stage, parallel job
      os: linux
      name: Ubuntu AMD64 Build
      script:
        - scripts/travis/build_test.sh
    - # same stage, parallel job
      os: linux
      name: Ubuntu AMD64 Integration Test
      script:
        - ./scripts/travis/integration_test.sh
    - # same stage, parallel job
      name: External ARM64 Build
      os: linux
      env:
        - BUILD_TYPE: "external_build"
        - TARGET_PLATFORM: "linux-arm64"
      addons:
        apt:
          packages:
            - awscli
      script:
        - scripts/travis/external_build.sh ./scripts/travis/build_test.sh
    - # same stage, parallel job
      name: External ARM64 Integration Test
      os: linux
      env:
        - BUILD_TYPE: "external_build"
        - TARGET_PLATFORM: "linux-arm64"
      addons:
        apt:
          packages:
            - awscli
      script:
        - scripts/travis/external_build.sh ./scripts/travis/integration_test.sh
    - # same stage, parallel job
      os: osx
      osx_image: xcode11
      name: MacOS AMD64 Build
      script:
        - scripts/travis/build_test.sh
    - # same stage, parallel job
      os: osx
      osx_image: xcode11
      name: MacOS AMD64 Integration Test
      script:
        - ./scripts/travis/integration_test.sh
    - # same stage, parallel job
       os: windows
       name: Windows x64 Build
       cache:
         directories:
           - $HOME/AppData/Local/Temp/chocolatey
           - /C/tools/msys64
       script:
         - $mingw64 scripts/travis/build_test.sh

    - stage: build_release
      os: linux
      name: Ubuntu AMD64 CodeGen Verification
      script:
        - scripts/travis/codegen_verification.sh
    - # same stage, parallel job
      os: linux
      name: Ubuntu AMD64 Build
      script:
        - ./scripts/travis/build_test.sh
    - # same stage, parallel job
      os: linux
      name: Ubuntu AMD64 Integration Test
      script:
        - ./scripts/travis/integration_test.sh
    - # same stage, parallel job
      name: External ARM64 Build
      os: linux
      env:
        - BUILD_TYPE: "external_build"
        - TARGET_PLATFORM: "linux-arm64"
      addons:
        apt:
          packages:
            - awscli
      script:
        - scripts/travis/external_build.sh ./scripts/travis/build_test.sh
    - # same stage, parallel job
      name: External ARM64 Integration Test
      os: linux
      env:
        - BUILD_TYPE: "external_build"
        - TARGET_PLATFORM: "linux-arm64"
      addons:
        apt:
          packages:
            - awscli
      script:
        - scripts/travis/external_build.sh ./scripts/travis/integration_test.sh
    - # same stage, parallel job
      os: osx
      osx_image: xcode11
      name: MacOS AMD64 Build
      script:
        - scripts/travis/build_test.sh
    - # same stage, parallel job
      os: osx
      osx_image: xcode11
      name: MacOS AMD64 Integration Test
      script:
        - ./scripts/travis/integration_test.sh
    - # same stage, parallel job
       os: windows
       name: Windows x64 Build
       cache:
         directories:
           - $HOME/AppData/Local/Temp/chocolatey
           - /C/tools/msys64
       script:
         - $mingw64 scripts/travis/build_test.sh

    - stage: deploy
      name: Ubuntu Deploy
      os: linux
      script:
        - scripts/travis/deploy_packages.sh
        - scripts/travis/test_release.sh
    - # same stage, parallel job
      name: MacOS Deploy
      os: osx
      osx_image: xcode11
      script: scripts/travis/deploy_packages.sh
    - # same stage, parallel job
      name: External ARM64 Deploy
      os: linux
      env:
        - BUILD_TYPE: "external_build"
        - TARGET_PLATFORM: "linux-arm64"
      addons:
        apt:
          packages:
            - awscli
      script:
        - scripts/travis/external_build.sh ./scripts/travis/deploy_packages.sh

# Don't rebuild libsodium every time
cache:
  directories:
    - crypto/lib
    - $HOME/docker_cache

before_install:
- |-
   case $TRAVIS_OS_NAME in
   linux)
     # Disable sometimes-broken sources.list in Travis base images
     sudo rm -vf /etc/apt/sources.list.d/*
     ;;
   windows)
     [[ ! -f C:/tools/msys64/msys2_shell.cmd ]] && rm -rf C:/tools/msys64
     choco uninstall -y mingw
     choco upgrade --no-progress -y msys2
     export msys2='cmd //C RefreshEnv.cmd '
     export msys2+='& set MSYS=winsymlinks:nativestrict '
     export msys2+='& C:\\tools\\msys64\\msys2_shell.cmd -defterm -no-start'
     export mingw64="$msys2 -mingw64 -full-path -here -c "\"\$@"\" --"
     export msys2+=" -msys2 -c "\"\$@"\" --"
     $msys2 pacman --sync --noconfirm --needed mingw-w64-x86_64-toolchain unzip
     ## Install more MSYS2 packages from https://packages.msys2.org/base here
     taskkill //IM gpg-agent.exe //F  # https://travis-ci.community/t/4967
     export PATH=/C/tools/msys64/mingw64/bin:$PATH
     export MAKE=mingw32-make  # so that Autotools can find it
     ;;
   esac
   docker load -i $HOME/docker_cache/images.tar || true

before_cache:
- |-
   case $TRAVIS_OS_NAME in
   windows)
     # https://unix.stackexchange.com/a/137322/107554
     $msys2 pacman --sync --clean --noconfirm
     ;;
   esac
   docker save -o $HOME/docker_cache/images.tar $(docker images -a -q)

after_success:
  - scripts/travis/upload_coverage.sh || true

addons:
  apt:
    packages:
      - libboost-all-dev
      - fakeroot
      - rpm
      - python3-venv
      - libssl-dev
      - libffi-dev
  artifacts:
    s3_region: "us-east-1"
    paths:
      - $(git ls-files -o | grep -v crypto/libs | grep -v crypto/copies | grep -v crypto/libsodium-fork | grep -v crypto/lib/ | grep -v ^gen/ | grep -v swagger.json.validated | tr "\n" ":")

notifications:
  slack:
    if: branch = "master"
    secure: gFpv2geneHjFOzRwEGknsY+i+BEhSdyAlBlX4FfIgBqBnN55djT1/xuBf6YfWp4iU2+c2b2OeS8/BXI4lyBH2Nt/FuCOsN79HD8/s8/0CCpA/OdFeU2DS5+5ed/pD4tyS1RaI+zllq6U+HvQGUVTej5j4yqbL6uI1pF8wkHPW/aPoz7sIHf6b2HkfB/tcfReXyiRRl8tQO+dYiAXqhIQhMD1H1uKY2eeosqmYA5PqbD1ERl+cM3BByPoorJANWtUBncGRCg6Ps7kKxpEOw+LylfBwIxsfnxVcO7r5JIq7+y0f0a3uufXASEmlF1hR5FINUk9il/1JQhDgd9SPvMBj0q4/ohtk4Xpr7Dob91pfUBQ7r70vN2ZgN8TbPVRfUc7GgY9XS1GcjANaYOPIJVpO9pmbMFq13Z6y0XUykedmJVlUaeEfR68Sp8HpZRbKSuyxe9ANVmxyuDdknGR2BmiE3WE0Go2JT5l6E0CQM4LGttaIsg8w4wUarlMOT1rqtNqzTQCsb3hHr73gD4aqS9m/YtfXlGggk4QiR4IZcsSHUz94iKvJvkBgNjrpb3YmK6NUHxzsdTRIkj/63hM6I2QEwtuZ7rfAW0AEPLachGoCREYv85KTG5m7OtqEuRiPPZZNmXkRdd2z0NQoJBVpIGmZuRwLTpqBkAGLc8x/CgqSZ0=

env:
  global:
    secure: YMLx+QaBPgg97tVn2efZJSqwPRxybX9oR6Xe9oXUD4fEiVbOIv2BAsLP+MzSJGaFC+VXKha83kyDbAZnatDXTJYsBPOUgmIZDObQnktueR1v3TCKn3aw14G+/w6S4eQL+c7uW3idPE+KP3VWixjrBpWTHEfnZdnH9+qWeIWzy8A8UEAYPY/HXyDmwt5ceCJoITtdsuiuZNO2o7NGN8q+NP5A3ii8f5UyDa9/krxuA+x1e193wSGRdGcqxexM7zIq0uMhBF+2nOk4RAsDsqU33NpQw+dB1VJMta1XF+P6A7m16UKUjllTyOfUPGD068jKobVyWzbvZ79G2FZXGZ7HGE0711JZco3YenwtxXP8oGLgaIds6McoJnn3rbxe1i+PjRX09IXNQM/dNp53uxrtyi1y8ZEjzHjbb6z3rSOZrzaBhdVxBFR9Oc1Ek7i8MS1tlRlH58+U+Z1WPTvbcIQtFA5HmmTcDdBRkZtPC8bpVLHOZTGUcple9k39VtOGuSCvAAfHKENhieCaw/bBXX4bxAHAfiI0NEmdDrULDJLApWjtRCrUIqIqkdsJmtiZhE+iX1FKR9CP5lBXCAwDlPB3XOe0bSmiiGQ1/sf/1CovqOBg/vLwCpjQE0IZPofCiDZZdZbv4n4aCOjiAqhS8MjJ/LfLyUuAtPmQG5g47FzS1K4=

